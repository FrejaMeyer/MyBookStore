@page "/books"
@using System.Text.Json
@using ViewModel;
@inject HttpClient Http
@inject NavigationManager Navigation


<h3>All Books</h3>

<hr class="my-5" />
<h4 class="text-start mb-3">📙Find a book</h4>

<input class="form-control mb-3" placeholder="Search by title or author..." @bind="searchQuery" @oninput="@(() => currentPage = 1)" />

@if (books == null)
{
    <p>Loading books...</p>
}
else if (DisplayedBooks?.Any() != true)
{
    <p>No results found.</p>
}
else
{
    <div class="row row-cols-2 row-cols-md-3 row-cols-lg-4 g-4">
        @foreach (var book in CurrentPageBooks)
        {
            <div class="col">
                <div class="card h-100 shadow-sm">
                    <a @onclick="@(() => NavigateToBook(book.Id))" style="cursor: pointer">
                        <img src="@book.ImageUrl" class="card-img-top p-2"
                             style="height: 300px; width: 100%; object-fit: contain; background-color: white;" />
                    </a>
                    <div class="card-body d-flex flex-column">
                        <h6 class="card-title">@book.Title</h6>
                        <p class="card-subtitle text-muted mb-2">@book.Author</p>
                        <div class="mt-auto fw-bold text-danger">kr. @book.Price.ToString("F2")</div>
                    </div>
                </div>
            </div>
        }
    </div>

    <div class="mt-5 pt-4 d-flex justify-content-between align-items-center" style="margin-bottom: 80px;">
        <span>Showing @CurrentPageBooks.Count() out of @TotalBooks book</span>
        <div>
            @if (currentPage > 1)
            {
                <button class="btn btn-secondary me-2" @onclick="PreviousPage" disabled="@(currentPage == 1)">← Previous</button>
            }
            <button class="btn btn-secondary" @onclick="NextPage" disabled="@(currentPage >= Math.Ceiling((double)TotalBooks / pageSize))">Next →</button>
        </div>
    </div>
}

@code {
    private List<Book> books;
    private string errorMessage;
    private string searchQuery = string.Empty;

    private int currentPage = 1;
    private int pageSize = 10;

    private IEnumerable<Book> DisplayedBooks =>
        string.IsNullOrWhiteSpace(searchQuery)
            ? books
            : books?.Where(book =>
                (!string.IsNullOrEmpty(book.Title) && book.Title.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)) ||
                (!string.IsNullOrEmpty(book.Author) && book.Author.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)));

    private IEnumerable<Book> CurrentPageBooks => DisplayedBooks?
        .Skip((currentPage - 1) * pageSize)
        .Take(pageSize);

    private int TotalBooks => DisplayedBooks?.Count() ?? 0;

    private void NextPage()
    {
        if (currentPage < Math.Ceiling((double)TotalBooks / pageSize))
            currentPage++;
    }

    private void PreviousPage()
    {
        if (currentPage > 1)
            currentPage--;
    }

    private void NavigateToBook(string id)
    {
        Navigation.NavigateTo($"/book/{id}");
    }

    protected override async Task OnInitializedAsync()
    {
        var http = new HttpClient
        {
            BaseAddress = new Uri($"http://localhost:30005")
        };
        try
        {
            var response = await http.GetAsync("api/catalog");

            if (!response.IsSuccessStatusCode)
            {
                Console.WriteLine($"Fejlstatus fra API: {response.StatusCode}");
                return;
            }

            var content = await response.Content.ReadAsStringAsync();
            books = JsonSerializer.Deserialize<List<Book>>(content, new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            });
        }
        catch (Exception ex)
        {
            errorMessage = ex.ToString();
            Console.WriteLine(ex.ToString());
        }
    }
}
