@page "/books/genre/{Genre}"
@inject NavigationManager Navigation
@inject HttpClient Http
@using System.Text.Json
@using ViewModel;


<h3>Books - @Genre</h3>

 <hr class="my-5" />
<h4 class="text-start mb-3">📙Find a book</h4>

    <input class="form-control mb-3" placeholder="Search by title or author..." @bind="searchQuery" />

    @if (!string.IsNullOrWhiteSpace(searchQuery))
    {
    if (filteredBooks?.Any() == true)
    {
        <div class="row">
            @foreach (var book in filteredBooks)
            {
                <div class="col-md-4 mb-4">
                    <div class="card h-100 shadow" style="cursor: pointer;" @onclick="() => OpenBook(book.Id)">
                        <img src="@book.ImageUrl" class="card-img-top p-2"
                             style="height: 300px; width: 100%; object-fit: contain; background-color: white;" />
                        <div class="card-body">
                            <h5 class="card-title">@book.Title</h5>
                            <p class="card-text text-muted">by @book.Author</p>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else if (!string.IsNullOrWhiteSpace(searchQuery))
    {
        <p>No results found.</p>
    }
} else if (books == null)
{
    <p>Loading books</p>
}
else
{
    <div class="container mt-4">
        <div class="row row-cols-2 row-cols-md-3 row-cols-lg-4 g-4">
            @foreach (var book in books)
            {
                <div class="col">
                    <div class="card h-100 shadow-sm">
                        <a @onclick="@(() => NavigateToBook(book.Id))" style="cursor: pointer">
                            <img src="@book.ImageUrl" class="card-img-top p-2" style="height: 300px; width: 100%; object-fit: contain; background-color: white;" />
                        </a>
                        <div class="card-body d-flex flex-column">
                            <h6 class="card-title">@book.Title</h6>
                            <p class="card-subtitle text-muted mb-2">@book.Author</p>
                            <div class="mt-auto fw-bold text-danger">kr. @book.Price.ToString("F2")</div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}




@code {
    [Parameter]
    public string Genre { get; set; }

    private List<Book> books;

    protected override async Task OnParametersSetAsync()
    {
        var response = await Http.GetAsync("catalogservice/method/api/catalog");
        var content = await response.Content.ReadAsStringAsync();

        var allBooks = JsonSerializer.Deserialize<List<Book>>(content, new JsonSerializerOptions
        {
            PropertyNameCaseInsensitive = true
        });

        books = allBooks
            .Where(b => b.Genre?.Equals(Genre, StringComparison.OrdinalIgnoreCase) == true)
            .ToList();
    }

    private void NavigateToBook(string id)
    {
        Navigation.NavigateTo($"/book/{id}");
    }

    private List<Book>? allBooks;
    private List<Book>? randomBooks;
    private string searchQuery = string.Empty;

    private void OpenBook(string id)
    {
        Navigation.NavigateTo($"/book/{id}");
    }

    private IEnumerable<Book> filteredBooks => string.IsNullOrWhiteSpace(searchQuery)
        ? null
        : books?.Where(book =>
            (!string.IsNullOrEmpty(book.Title) && book.Title.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)) ||
            (!string.IsNullOrEmpty(book.Author) && book.Author.Contains(searchQuery, StringComparison.OrdinalIgnoreCase))
        );

}
